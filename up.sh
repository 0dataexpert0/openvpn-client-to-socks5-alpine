#!/bin/sh

if [ "${PEER_DNS}" != "no" ]; then
	NS=
	DOMAIN=
	SEARCH=
	i=1
	while true ; do
		eval opt=\$foreign_option_${i}
		[ -z "${opt}" ] && break
		if [ "${opt}" != "${opt#dhcp-option DOMAIN *}" ] ; then
			if [ -z "${DOMAIN}" ] ; then
				DOMAIN="${opt#dhcp-option DOMAIN *}"
			else
				SEARCH="${SEARCH}${SEARCH:+ }${opt#dhcp-option DOMAIN *}"
			fi
		elif [ "${opt}" != "${opt#dhcp-option DNS *}" ] ; then
			NS="${NS}nameserver ${opt#dhcp-option DNS *}\n"
		fi
		i=$((${i} + 1))
	done

	if [ -n "${NS}" ] ; then
		DNS="# Generated by openvpn for interface ${dev}\n"
		if [ -n "${SEARCH}" ] ; then
			DNS="${DNS}search ${DOMAIN} ${SEARCH}\n"
		elif [ -n "${DOMAIN}" ]; then
			DNS="${DNS}domain ${DOMAIN}\n"
		fi
		DNS="${DNS}${NS}"
		if [ -x /sbin/resolvconf ] ; then
			printf "${DNS}" | /sbin/resolvconf -a "${dev}"
		else
			# Preserve the existing resolv.conf
			if [ -e /etc/resolv.conf ] ; then
				cp /etc/resolv.conf /etc/resolv.conf-"${dev}".sv
			fi
			printf "${DNS}" > /etc/resolv.conf
			chmod 644 /etc/resolv.conf
		fi
	fi
fi

# Below section is Gentoo specific
# Quick summary - our init scripts are re-entrant and set the RC_SVCNAME env var
# as we could have >1 openvpn service

if [ -n "${RC_SVCNAME}" ]; then
	# If we have a service specific script, run this now
	if [ -x /etc/openvpn/"${RC_SVCNAME}"-up.sh ] ; then
		/etc/openvpn/"${RC_SVCNAME}"-up.sh "$@"
	fi

	# Re-enter the init script to start any dependant services
	if ! /etc/init.d/"${RC_SVCNAME}" --quiet status ; then
		export IN_BACKGROUND=true
		/etc/init.d/${RC_SVCNAME} --quiet start
	fi
fi

#exit 0

# vim: ts=4 :

# prepare vpn
mkdir -p /dev/net
if [ ! -c /dev/net/tun ]; then
        mknod /dev/net/tun c 10 200
fi

OVPNCONF=/ovpn.conf

[ -f $OVPNCONF ] || {
        echo /etc/openvpn/ovpn.conf is missing please provide the volume with the file  > /dev/stderr; 
        exit 1; 
}

REMOTE=`grep '^remote\s' $OVPNCONF | awk '{print $2}'`
DEFAULTGW=`ip ro ls | grep default | awk '{print $3}'`

[ -n "$REMOTE" ] || { 
        echo no remote in /etc/openvpn/ovpn.conf > /dev/stderr; 
        exit 1; 
}
[ -n "$DEFAULTGW" ] || { 
        echo could not determine default gateway > /dev/stderr; 
        exit 1; 
}


# make sure default route is deleted forever
ip ro del default

# add a route only for the VPN server
ip ro add $REMOTE via $DEFAULTGW dev eth0


exit 0
